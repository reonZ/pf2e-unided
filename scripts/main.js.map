{"version":3,"file":"main.js","mappings":"mBAAO,IAAI,EAAY,GACZ,EAAO,SCCX,SAAS,KAA8BA,GAC1C,MAAO,GAAG,cAAsBA,EAAKC,KAAK,MAC9C,CCDO,SAASC,EAA0BC,GACtC,OAAOC,KAAKC,SAASC,IAAI,EAAWH,EACxC,CAWO,SAASI,EACZC,GAEA,MAAMC,EAAOD,EAAQC,KACrBD,EAAQE,MAAQF,EAAQE,OAAS,QACjCF,EAAQG,OAASH,EAAQG,SAAU,EAC/BH,EAAQG,SACRH,EAAQC,KAAO,EAA2BA,EAAM,QAChDD,EAAQI,KAAO,EAA2BH,EAAM,SAEhDI,MAAMC,QAAQN,EAAQO,WACtBP,EAAQO,QAAUP,EAAQO,QAAQC,QAAO,CAACD,EAASE,KAC/CF,EAAQE,GAAU,EAA2BR,EAAM,UAAWQ,GACvDF,IACR,CAAC,IAERX,KAAKC,SAASa,SAAmB,EAAWT,EAAMD,EACtD,CCJA,SAASW,EAAcC,GACnBC,MAAMD,EAAQ,KAAO,OAAO,gBAAiBE,EACjD,CAEA,SAASC,EAAcH,GACnBC,MAAMD,EAAQ,KAAO,OAAO,gBAAiBI,EACjD,CAEA,SAASF,EAAgBG,GACrB,MAAMC,EAAWD,EACZC,EAASC,KAAQD,EAASE,SAAS,cACxCF,EAASG,QAAQC,OAAOC,eAAeC,aAAaL,IAAMF,EAAKE,IACnE,CAEA,SAASH,EAAgBC,EAAYQ,GAC3BR,EAAkBG,SAAS,aAAiB,QAASK,GAC3DC,YAAYD,EAAS,yCAA0CA,EAAQN,IAC3E,EH3CO,SAAqBQ,EAAYC,GAAW,GAC1C,IAAW,EGDK,eHErB,EAAOA,EAAW,SAAW,QACjC,CGFAC,GAEAhB,MAAMiB,GAAG,QAAQ,KACb/B,EAAgB,CACZE,KAAM,SACNE,QAAQ,EACR4B,KAAMC,QACNC,SAAS,EACTC,SAAUvB,IAGdZ,EAAgB,CACZE,KAAM,SACNE,QAAQ,EACR4B,KAAMC,QACNC,SAAS,EACTC,SAAUnB,GACZ,IAGNF,MAAMiB,GAAG,SAAS,KACdnB,EAAcjB,EAAW,WACzBqB,EAAcrB,EAAW,UAAU,G","sources":["webpack:///../../../../foundryVTT-projects/@utils/module.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/path.ts","webpack:///../../../../foundryVTT-projects/@utils/foundry/settings.ts","webpack:///./src/main.ts"],"sourcesContent":["export let MODULE_ID = ''\r\nexport let TYPE = 'module'\r\n\r\nexport function setModuleID(id: string, isSystem = false) {\r\n    if (!MODULE_ID) MODULE_ID = id\r\n    TYPE = isSystem ? 'system' : 'module'\r\n}\r\n","import { MODULE_ID, TYPE } from '@utils/module'\r\n\r\nexport function getSettingLocalizationPath(...path: string[]) {\r\n    return `${MODULE_ID}.settings.${path.join('.')}`\r\n}\r\n\r\nexport function flagsUpdatePath(...path: string[]) {\r\n    return `flags.${MODULE_ID}.${path.join('/')}`\r\n}\r\n\r\nexport function templatePath(...path: string[]) {\r\n    path = path.filter(x => typeof x === 'string')\r\n    return `${TYPE}s/${MODULE_ID}/templates/${path.join('/')}`\r\n}\r\n\r\nexport function imagePath(...path: string[]) {\r\n    return `${TYPE}s/${MODULE_ID}/images/${path.join('/')}`\r\n}\r\n","import { MODULE_ID } from '@utils/module'\r\nimport { getSettingLocalizationPath } from '@utils/foundry/path'\r\n\r\nexport function getSetting<T extends any>(key: string) {\r\n    return game.settings.get(MODULE_ID, key) as T\r\n}\r\n\r\nexport function setSetting(key: string, value: unknown) {\r\n    return game.settings.set(MODULE_ID, key, value)\r\n}\r\n\r\n/**\r\n * options.scope = 'world'\r\n *\r\n * options.config = false\r\n */\r\nexport function registerSetting<TChoices extends Record<string, unknown> | undefined>(\r\n    options: Omit<SettingRegistration<TChoices>, 'choices'> & { choices?: string[] | Record<string, unknown>; name: string }\r\n) {\r\n    const name = options.name\r\n    options.scope = options.scope ?? 'world'\r\n    options.config = options.config ?? false\r\n    if (options.config) {\r\n        options.name = getSettingLocalizationPath(name, 'name')\r\n        options.hint = getSettingLocalizationPath(name, 'hint')\r\n    }\r\n    if (Array.isArray(options.choices)) {\r\n        options.choices = options.choices.reduce((choices, choice) => {\r\n            choices[choice] = getSettingLocalizationPath(name, 'choices', choice)\r\n            return choices\r\n        }, {} as Record<string, unknown>)\r\n    }\r\n    game.settings.register<TChoices>(MODULE_ID, name, options as SettingRegistration<TChoices>)\r\n}\r\n\r\n/**\r\n * options.restricted = true\r\n *\r\n * options.icon = 'fas fa-cogs'\r\n */\r\nexport function registerSettingMenu(\r\n    options: RequiredBy<Partial<Omit<SettingSubmenuConfig, 'type'>>, 'name'> & { type: ConstructorOf<FormApplication> }\r\n) {\r\n    const name = options.name\r\n    options.name = getSettingLocalizationPath('menus', name, 'name')\r\n    options.label = getSettingLocalizationPath('menus', name, 'label')\r\n    options.hint = getSettingLocalizationPath('menus', name, 'hint')\r\n    options.restricted = options.restricted ?? true\r\n    options.icon = options.icon ?? 'fas fa-cogs'\r\n    game.settings.registerMenu(MODULE_ID, name, options as SettingSubmenuConfig)\r\n}\r\n\r\nexport function getCombatTrackerConfig() {\r\n    return game.settings.get('core', 'combatTrackerConfig') as { resource: string; skipDefeated: boolean }\r\n}\r\n","import { setModuleID } from '@utils/module'\r\nimport { getSetting, registerSetting } from '../../../../../foundryVTT-projects/@utils/foundry/settings'\r\n\r\nexport const MODULE_ID = 'pf2e-unided'\r\nsetModuleID(MODULE_ID)\r\n\r\nHooks.on('init', () => {\r\n    registerSetting({\r\n        name: 'create',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: setCreateHook,\r\n    })\r\n\r\n    registerSetting({\r\n        name: 'update',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n        onChange: setUpdateHook,\r\n    })\r\n})\r\n\r\nHooks.on('ready', () => {\r\n    setCreateHook(getSetting('create'))\r\n    setUpdateHook(getSetting('update'))\r\n})\r\n\r\nfunction setCreateHook(value: boolean) {\r\n    Hooks[value ? 'on' : 'off']('preCreateItem', onPreCreateItem)\r\n}\r\n\r\nfunction setUpdateHook(value: boolean) {\r\n    Hooks[value ? 'on' : 'off']('preUpdateItem', onPreUpdateItem)\r\n}\r\n\r\nfunction onPreCreateItem(item: Item) {\r\n    const itemPF2e = item as ItemPF2e\r\n    if (!itemPF2e.img || !itemPF2e.isOfType('physical')) return\r\n    itemPF2e._source.system.identification.unidentified.img = item.img\r\n}\r\n\r\nfunction onPreUpdateItem(item: Item, changes: DocumentUpdateData<ItemPF2e>) {\r\n    if (!(item as ItemPF2e).isOfType('physical') || !('img' in changes)) return\r\n    setProperty(changes, 'system.identification.unidentified.img', changes.img)\r\n}\r\n"],"names":["path","join","getSetting","key","game","settings","get","registerSetting","options","name","scope","config","hint","Array","isArray","choices","reduce","choice","register","setCreateHook","value","Hooks","onPreCreateItem","setUpdateHook","onPreUpdateItem","item","itemPF2e","img","isOfType","_source","system","identification","unidentified","changes","setProperty","id","isSystem","setModuleID","on","type","Boolean","default","onChange"],"sourceRoot":""}